/*
 * This file is generated by jOOQ.
 */
package BookingApp2.com.example.demo.entities;


import BookingApp2.com.example.demo.entities.tables.Property;
import BookingApp2.com.example.demo.entities.tables.PropertyReviews;
import BookingApp2.com.example.demo.entities.tables.Review;
import BookingApp2.com.example.demo.entities.tables.records.PropertyRecord;
import BookingApp2.com.example.demo.entities.tables.records.PropertyReviewsRecord;
import BookingApp2.com.example.demo.entities.tables.records.ReviewRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * booking_app.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<PropertyRecord> KEY_PROPERTY_PRIMARY = Internal.createUniqueKey(Property.PROPERTY, DSL.name("KEY_property_PRIMARY"), new TableField[] { Property.PROPERTY.PROPERTYID }, true);
    public static final UniqueKey<PropertyReviewsRecord> KEY_PROPERTY_REVIEWS_PRIMARY = Internal.createUniqueKey(PropertyReviews.PROPERTY_REVIEWS, DSL.name("KEY_property_reviews_PRIMARY"), new TableField[] { PropertyReviews.PROPERTY_REVIEWS.PROPERTYID, PropertyReviews.PROPERTY_REVIEWS.REVIEWID }, true);
    public static final UniqueKey<ReviewRecord> KEY_REVIEW_PRIMARY = Internal.createUniqueKey(Review.REVIEW, DSL.name("KEY_review_PRIMARY"), new TableField[] { Review.REVIEW.REVIEWID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<PropertyReviewsRecord, PropertyRecord> PROPERTYID = Internal.createForeignKey(PropertyReviews.PROPERTY_REVIEWS, DSL.name("PropertyId"), new TableField[] { PropertyReviews.PROPERTY_REVIEWS.PROPERTYID }, Keys.KEY_PROPERTY_PRIMARY, new TableField[] { Property.PROPERTY.PROPERTYID }, true);
    public static final ForeignKey<PropertyReviewsRecord, ReviewRecord> REVIEWID = Internal.createForeignKey(PropertyReviews.PROPERTY_REVIEWS, DSL.name("ReviewId"), new TableField[] { PropertyReviews.PROPERTY_REVIEWS.REVIEWID }, Keys.KEY_REVIEW_PRIMARY, new TableField[] { Review.REVIEW.REVIEWID }, true);
}
