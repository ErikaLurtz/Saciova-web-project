/*
 * This file is generated by jOOQ.
 */
package BookingApp2.com.example.demo.entities.tables;


import BookingApp2.com.example.demo.entities.BookingApp;
import BookingApp2.com.example.demo.entities.Indexes;
import BookingApp2.com.example.demo.entities.Keys;
import BookingApp2.com.example.demo.entities.tables.records.PropertyReviewsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PropertyReviews extends TableImpl<PropertyReviewsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>booking_app.property_reviews</code>
     */
    public static final PropertyReviews PROPERTY_REVIEWS = new PropertyReviews();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PropertyReviewsRecord> getRecordType() {
        return PropertyReviewsRecord.class;
    }

    /**
     * The column <code>booking_app.property_reviews.PropertyId</code>.
     */
    public final TableField<PropertyReviewsRecord, Integer> PROPERTYID = createField(DSL.name("PropertyId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>booking_app.property_reviews.ReviewId</code>.
     */
    public final TableField<PropertyReviewsRecord, Integer> REVIEWID = createField(DSL.name("ReviewId"), SQLDataType.INTEGER.nullable(false), this, "");

    private PropertyReviews(Name alias, Table<PropertyReviewsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PropertyReviews(Name alias, Table<PropertyReviewsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>booking_app.property_reviews</code> table
     * reference
     */
    public PropertyReviews(String alias) {
        this(DSL.name(alias), PROPERTY_REVIEWS);
    }

    /**
     * Create an aliased <code>booking_app.property_reviews</code> table
     * reference
     */
    public PropertyReviews(Name alias) {
        this(alias, PROPERTY_REVIEWS);
    }

    /**
     * Create a <code>booking_app.property_reviews</code> table reference
     */
    public PropertyReviews() {
        this(DSL.name("property_reviews"), null);
    }

    public <O extends Record> PropertyReviews(Table<O> child, ForeignKey<O, PropertyReviewsRecord> key) {
        super(child, key, PROPERTY_REVIEWS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : BookingApp.BOOKING_APP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PROPERTY_REVIEWS_REVIEWID_IDX);
    }

    @Override
    public UniqueKey<PropertyReviewsRecord> getPrimaryKey() {
        return Keys.KEY_PROPERTY_REVIEWS_PRIMARY;
    }

    @Override
    public List<ForeignKey<PropertyReviewsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROPERTYID, Keys.REVIEWID);
    }

    private transient Property _property;
    private transient Review _review;

    public Property property() {
        if (_property == null)
            _property = new Property(this, Keys.PROPERTYID);

        return _property;
    }

    public Review review() {
        if (_review == null)
            _review = new Review(this, Keys.REVIEWID);

        return _review;
    }

    @Override
    public PropertyReviews as(String alias) {
        return new PropertyReviews(DSL.name(alias), this);
    }

    @Override
    public PropertyReviews as(Name alias) {
        return new PropertyReviews(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PropertyReviews rename(String name) {
        return new PropertyReviews(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PropertyReviews rename(Name name) {
        return new PropertyReviews(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
