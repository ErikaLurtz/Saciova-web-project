/*
 * This file is generated by jOOQ.
 */
package BookingApp2.com.example.demo.entities.tables;


import BookingApp2.com.example.demo.entities.BookingApp;
import BookingApp2.com.example.demo.entities.Keys;
import BookingApp2.com.example.demo.entities.tables.records.ReviewRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Review extends TableImpl<ReviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>booking_app.review</code>
     */
    public static final Review REVIEW = new Review();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReviewRecord> getRecordType() {
        return ReviewRecord.class;
    }

    /**
     * The column <code>booking_app.review.ReviewId</code>.
     */
    public final TableField<ReviewRecord, Integer> REVIEWID = createField(DSL.name("ReviewId"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>booking_app.review.Country</code>.
     */
    public final TableField<ReviewRecord, String> COUNTRY = createField(DSL.name("Country"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>booking_app.review.Description</code>.
     */
    public final TableField<ReviewRecord, String> DESCRIPTION = createField(DSL.name("Description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>booking_app.review.Icon</code>.
     */
    public final TableField<ReviewRecord, String> ICON = createField(DSL.name("Icon"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>booking_app.review.Username</code>.
     */
    public final TableField<ReviewRecord, String> USERNAME = createField(DSL.name("Username"), SQLDataType.VARCHAR(255), this, "");

    private Review(Name alias, Table<ReviewRecord> aliased) {
        this(alias, aliased, null);
    }

    private Review(Name alias, Table<ReviewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>booking_app.review</code> table reference
     */
    public Review(String alias) {
        this(DSL.name(alias), REVIEW);
    }

    /**
     * Create an aliased <code>booking_app.review</code> table reference
     */
    public Review(Name alias) {
        this(alias, REVIEW);
    }

    /**
     * Create a <code>booking_app.review</code> table reference
     */
    public Review() {
        this(DSL.name("review"), null);
    }

    public <O extends Record> Review(Table<O> child, ForeignKey<O, ReviewRecord> key) {
        super(child, key, REVIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : BookingApp.BOOKING_APP;
    }

    @Override
    public Identity<ReviewRecord, Integer> getIdentity() {
        return (Identity<ReviewRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReviewRecord> getPrimaryKey() {
        return Keys.KEY_REVIEW_PRIMARY;
    }

    @Override
    public Review as(String alias) {
        return new Review(DSL.name(alias), this);
    }

    @Override
    public Review as(Name alias) {
        return new Review(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(String name) {
        return new Review(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(Name name) {
        return new Review(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
